PROGRAM TO IMPLEMENT DFS TOPOLOGICAL SORT

#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
typedef struct Node Node;
struct Graph {
    int numVertices;
    Node** adjList;
};
typedef struct Graph Graph;
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
Graph* createGraph(int numVertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = numVertices; 
graph->adjList = (Node*)malloc(numVertices * sizeof(Node));
    for (int i = 0; i < numVertices; ++i)
        graph->adjList[i] = NULL;
    return graph;
}
void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;
    newNode = createNode(src);
    newNode->next = graph->adjList[dest];
    graph->adjList[dest] = newNode;
}
void DFSUtil(Graph* graph, int vertex, int visited[]) {
    visited[vertex] = 1;
    printf("%d ", vertex);
    Node* temp = graph->adjList[vertex];
    while (temp != NULL) {
        if (!visited[temp->data])
            DFSUtil(graph, temp->data, visited);
        temp = temp->next;
    }
}
void DFS(Graph* graph, int startVertex) {
    int* visited = (int*)malloc(graph->numVertices * sizeof(int));
    for (int i = 0; i < graph->numVertices; i++)
        visited[i] = 0;
    printf("DFS starting from vertex %d: ", startVertex);
    DFSUtil(graph, startVertex, visited);
    free(visited);
}
int main() {
    int numVertices, startVertex;
    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &numVertices);
    Graph* graph = createGraph(numVertices);
    int numEdges;
    printf("Enter the number of edges in the graph: ");
    scanf("%d", &numEdges);
    printf("Enter the edges (src dest) separated by space:\n");
    for (int i = 0; i < numEdges; i++) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }
    printf("Enter the starting vertex for DFS: ");
    scanf("%d", &startVertex);
    DFS(graph, startVertex);
    free(graph->adjList);
    free(graph);
    return 0;
}
