PROGRAM TO IMPLEMENT CIRCULAR QUEUE

#include <stdio.h>
#include <stdlib.h>
struct CircularQueue {
    int front, rear;
    int arr[MAX_SIZE];
};
void initializeQueue(struct CircularQueue *queue) {
    queue->front = queue->rear = -1;
}
int isFull(struct CircularQueue *queue) {
    return (queue->front == 0 && queue->rear == MAX_SIZE - 1) || (queue->rear == (queue->front - 1) % (MAX_SIZE - 1));
}
int isEmpty(struct CircularQueue *queue) {
    return queue->front == -1;
}
void enqueue(struct CircularQueue *queue, int item) {
    if (isFull(queue)) {
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }
    if (isEmpty(queue))
        queue->front = 0;
    queue->rear = (queue->rear + 1) % MAX_SIZE;
    queue->arr[queue->rear] = item;
    printf("%d enqueued to the queue.\n", item);
}

int dequeue(struct CircularQueue *queue) {
    int item;
    if (isEmpty(queue)) {
   printf("Queue is empty. Cannot dequeue.\n");
        return -1;
    }
    item = queue->arr[queue->front];
    if (queue->front == queue->rear)
        initializeQueue(queue);
  else
        queue->front = (queue->front + 1) % MAX_SIZE;

    printf("%d dequeued from the queue.\n", item);
    return item;
}

void display(struct CircularQueue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }

    printf("Queue elements: ");
    int i = queue->front;
    do {
        printf("%d ", queue->arr[i]);
        i = (i + 1) % MAX_SIZE;
    } while (i != (queue->rear + 1) % MAX_SIZE);
    printf("\n");
}

int main() {
    struct CircularQueue queue;
    initializeQueue(&queue);

    int choice, item;

    do {
        printf("\n1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to enqueue: ");
                scanf("%d", &item);
                enqueue(&queue, item);
                break;
            case 2:
                dequeue(&queue);
                break;
            case 3:
                display(&queue);
          break;
            case 4:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }

    } while (choice != 4);

    return 0;
}



